#!/usr/bin/env node
'use strict';
const mklog = desc => {
    const paths = [], vars = [];
    for (let n = desc.length, i = 0; i < n; ++i) 
        if (desc[i] !== ':') paths.push(desc[i]); 
        else for (++i; i < n; ++i) vars.push(desc[i]);
    const pathsStr = paths.join('][');
    const formatStr = vars.map(name => ` ${name}: %j`).join(',');
    const paramStr = vars.map(name => ` ${name}`).join(',');
    return `console.debug('[${pathsStr}]${formatStr}'${paramStr.length ? ',' : ''}${paramStr});`;
};
/**
 * split command-line like string to string array
 * - ignore consequent spaces
 * - support ' or " to contain spaces in one argument
 * @example 'Gang  24 "say sth"' => ['Gang', '24', '"say sth"']
 * @example 'Gang  24 "say sth\' ah"' => [ 'Gang', '24', '"say sth\' "' ]
 * @param {string} args
 * @returns {string[]} argv
 */
const split = args => {
    const argv = [];
    const delim = [];
    let s = 0, i = 0;
    for (; i < args.length; ++i) { 
        const c = args[i];
        if (delim.length) {
            if (c === delim[delim.length - 1]) delim.pop();
            else if (c === '"' || c === "'") delim.push(c);
        } else if (c === ' ') {
            if (s < i) argv.push(args.slice(s, i)); 
            s = i + 1;    
        } else if (c === '"' || c === "'") delim.push(c);
    }
    if (s < i) argv.push(args.slice(s, i));
    return argv;
};
const output = (() => {
    try {
        const ncp = require('copy-paste');
        return log => { console.log(`\x1b[32m${log}\x1b[0m`); ncp.copy(log); };
    } catch (e) {
        return log => { console.log(`\x1b[32m${log}\x1b[0m`); };
    }
})();
/**
 * a program to make standard debug log code
 * @argument -i: Interactive mode
 * @input path1 path2 : var1 var2
 * @output console.debug('[path1][path2] var1: %j, var2: %j', var1, var2);
 */
const main = () => {
    if (process.argv.length > 2 && process.argv[2] !== '-i')
        output(mklog(process.argv.slice(2)));
    else {
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout,
            prompt: 'mklog> '
        });
        rl.prompt();
        rl.on('line', line => {
            output(mklog(split(line)));
            rl.prompt();
        });
    }
};
main();
